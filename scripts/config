#!/usr/bin/env python3
# -*- python -*-

#
# Copyright (C)  2019 ifm electronic, gmbh
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
import argparse
import json
import sys

import rclpy
from ifm3d_ros2.srv import Config

WAIT_SECS = 2.0
SRV_NAME = "/ifm3d/camera/Config"
NODE_NAME = "ifm3d_ros2_config_client"

def get_args():
    parser = argparse.ArgumentParser(
        description='Configure an ifm3d camera from JSON piped to stdin',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('--srv', required=False, default=SRV_NAME,
                        help="The fully qualified `Config' service to call")
    parser.add_argument('--node', required=False, default=NODE_NAME,
                        help="The node name of this service client")

    args = parser.parse_args(sys.argv[1:])
    return args

def main():
    args = get_args()

    rclpy.init()
    node = rclpy.create_node(args.node)
    cli = node.create_client(Config, args.srv)
    req = Config.Request()
    log = node.get_logger()

    try:
        req.json = json.dumps(json.load(sys.stdin))

        while not cli.wait_for_service(timeout_sec=WAIT_SECS):
            log.info("Config service not available, waiting...")

        fut = cli.call_async(req)
        rclpy.spin_until_future_complete(node, fut)

        res = fut.result()
        if res is not None:
            if res.status != 0:
                log.error("Config failed with error: %s - %s" %
                          (str(res.status), res.msg))
        else:
           log.warn("Service call failed %r" % (fut.exception(),))

    except KeyboardInterrupt:
        pass

    finally:
        node.destroy_node()
        rclpy.shutdown()

    return 0

if __name__ == '__main__':
    sys.exit(main())
